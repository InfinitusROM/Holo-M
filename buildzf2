#!/bin/bash
start=`date +%s`
NOW=$(date +"%d-%m-%Y")
echo "Current Date : $NOW"
echo "Applying Build Settings"

export ARCH=x86_64
export CCOMPILE=$CROSS_COMPILE
export CROSS_COMPILE=x86_64-linux-

#CONFIGS
export SLEEP=1
echo "Setting CPU Cores/Threads"
printf "Enter Version Number:////:"
sleep $SLEEP
read v
echo "Setting Extra Version"
export EV=EXTRAVERSION=_Holo_M_v$v
echo "Setting Defconfig"
export DEFCONFIG=holo_zenfone2_defconfig
echo "SElinux set to Enforcing"

#Force selinux to enforcing (this makes sure that if we build cyanogen kernel just after nethunter, we have enforcing state)
sed -i '50s|.*|  /tmp/anykernel/tools/mkbootimg --kernel /tmp/anykernel/bzImage --ramdisk /tmp/anykernel/initramfs.cpio.gz --cmdline "init=/init pci=noearly loglevel=0 vmalloc=256M androidboot.hardware=mofd_v1 watchdog.watchdog_thresh=60 androidboot.spid=xxxx:xxxx:xxxx:xxxx:xxxx:xxxx androidboot.serialno=01234567890123456789 snd_pcm.maximum_substreams=8 ip=50.0.0.2:50.0.0.1::255.255.255.0::usb0:on debug_locks=0 bootboost=1" --base 0x10000000 --pagesize 2048 --ramdisk_offset 0x01000000 --tags_offset 0x00000100 --second /tmp/anykernel/second.gz -o /tmp/anykernel/boot-new.img;|g' out/anykernel.sh

echo "Setting bzImage Location"
export BZIMAGE=arch/x86/boot/bzImage
echo "Enabling Graphite Optimizations"
export ENABLE_GRAPHITE=true
echo "To enable logging support export logs=1 or 101"
sleep $SLEEP
echo "Enviroment Setup Complete Now Moving To Compiling"

#Build
echo "Checking for Previous Compiled Files"
if [ -e "arch/x86/kernel/process_64.o" ];
then
	echo "Cleaning Out Compiled Files"
	sleep $SLEEP
	make mrproper
	sleep 1
	rm -f .log*.log
	find . -name "*.o" -type f -delete
	rm -f .config*.old
elif [ -e ".log*.log" ]
then
	echo "Build Logs will be deleted in 3s"
	sleep 3
	rm -f .log*.log
else
	echo "Enviroment is Clean"
fi
echo "Starting Build Process"
if [ -f .config ];
then
   echo ".config exists"
   echo "Continuing To Compiler"
   sleep 3
else
   echo ".config Does Not Exist"
   echo "Compiling From $DEFCONFIG"
   if [[ "$logs" == 1 ]];
	then
		make $DEFCONFIG $EV -j24 2>&1 | tee .log_"$start".log
		unset logs
	elif [[ "$logs" == 101 ]]
	then
		make $DEFCONFIG $EV -j24 2>&1 | tee .log_"$start".log
	else
		make $DEFCONFIG $EV -j24
	fi
fi
#
if [[ "$logs" == 1 ]];
then
	make $EV -j24 2>&1 | tee .log_"$start".log
	unset logs
elif [[ "$logs" == 101 ]]
then
	make $EV -j24 2>&1 | tee .log_"$start".log
else
	make $EV -j24
fi
#
sleep 2
if [ -f $BZIMAGE ];
then
   echo "$BZIMAGE exists"
   echo "Compile Complete Continuing To Packing"
   sleep $SLEEP
else
   echo "$BZIMAGE Does Not Exists Please Check For Compile Errors"
   echo "Now exiting script"
   sleep $SLEEP
   exit 0
fi
clear
#make it a bit more beautiful :P
echo "script made by eoghan2t7 of xda"
printf "say thanks to him if this helped you :) \n\n"
echo "Current Date : $NOW"
echo "Applying Build Settings : done"
echo "Version Number = $v"
echo "cleaning previous files : done"
echo "Starting Build Process  : done"
echo "Build complete"

#Kernel Packing
echo "Starting Packing To Recovery Flashable Zip"
cd out/
echo "Removing Old Files"
rm -rf bzImage *.zip
sleep $SLEEP
echo "Copying bzImage"
mv ../arch/x86/boot/bzImage bzImage
sleep $SLEEP
echo "Compiling HoloM_v"$v".zip"
find . -type f -exec zip HoloM_v"$v".zip {} +
nowf=$(date +"%T")
cd ..
rm out/bzImage
printf "\n\nzip created\n"

#Force selinux to enforcing (this makes sure that if we build cyanogen kernel just after nethunter, we have enforcing state)
sed -i '50s|.*|  /tmp/anykernel/tools/mkbootimg --kernel /tmp/anykernel/bzImage --ramdisk /tmp/anykernel/initramfs.cpio.gz --cmdline "init=/init pci=noearly loglevel=0 vmalloc=256M androidboot.hardware=mofd_v1 watchdog.watchdog_thresh=60 androidboot.spid=xxxx:xxxx:xxxx:xxxx:xxxx:xxxx androidboot.serialno=01234567890123456789 snd_pcm.maximum_substreams=8 ip=50.0.0.2:50.0.0.1::255.255.255.0::usb0:on debug_locks=0 bootboost=1" --base 0x10000000 --pagesize 2048 --ramdisk_offset 0x01000000 --tags_offset 0x00000100 --second /tmp/anykernel/second.gz -o /tmp/anykernel/boot-new.img;|g' out/anykernel.sh

printf "\n\nCleaned all Files\n"
printf "Zip created & Shipped\n"
rm -f $pr/Nexus/Dev/HoloM_v"$v".zip
mv out/HoloM_v"$v".zip $pr/Nexus/Dev
end=`date +%s`
runtime=$((end-start))
echo "Completion Time :"
echo "$runtime seconds"
unset SLEEP
unset v
printf "\n\nDone\n"